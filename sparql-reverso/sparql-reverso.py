#!/usr/bin/env python3
# Parse SPARQl query generated by WatDiv to isolate specific patterns
# author : Thomas Minier

import re
import random
import os
import argparse
from node import Node
from triplePattern import TriplePattern


def loadBGP(query):
    """Create a BGP as a list of triple patterns from a SPARQL query
    """
    queryBGP = list()
    bgp = re.search('WHERE {(.*)}', query).group(1)
    for triple in bgp.split(' . '):
        elements = triple.strip().split(' ')
        # check if current triple pattern is well formed
        if (len(elements) < 3) or (len(elements) > 3):
            raise SyntaxError('The pattern {} is not well formed : '
                              'it must contains exactly three nodes.'
                              .format(triple.strip()))

        # seralize it
        subject = Node(elements[0], elements[0] == '%p%')
        predicate = Node(elements[1], elements[1] == '%p%')
        obj = Node(elements[2], elements[2] == '%p%')
        queryBGP.append(TriplePattern(subject, predicate, obj))
    return queryBGP


def main():
    """Main function
    """
    parser = argparse.ArgumentParser(description='Parse SPARQl query generated'
                                     ' by WatDiv to isolate specific patterns')
    parser.add_argument('-p', '--patterns-folder', type=str, required=True,
                        help='folder which contains query patterns for parsing')
    parser.add_argument('-q', '--queries-file', type=str, required=True,
                        help='file which contains queries to parse')
    parser.add_argument('-o', '--output', type=str, required=True,
                        help='output file')
    args = parser.parse_args()

    queryPatterns = list()
    queries = list()
    results = list()

    # load all the patterns
    for patternFile in os.listdir(args.patterns_folder):
        queryBGP = list()
        fileName = "{}/{}".format(args.patterns_folder, patternFile)
        with open(fileName, 'r') as reader:
            line = reader.read()
            queryPatterns.append(loadBGP(line))

    # search patterns in the queries file
    with open(args.queries_file, 'r') as reader:
        lineNumber = 1
        # load the BGP from the query of each line
        for line in reader:
            bgp = loadBGP(line)
            # save the queries which math a pattern and
            # which doesn't have been selected before
            if (bgp in queryPatterns) and (line not in queries):
                queries.append(line)
                results.append(lineNumber)
            lineNumber += 1

    # output 100 random line numbers in output file
    with open(args.output, 'w') as writer:
        if(len(results) >= 100):
            sample = random.sample(results, 100)
        else:
            # use sampling with replacement when we doesn't have engouh results
            sample = results + random.sample(results, 100 - len(results))
            random.shuffle(sample)
        for result in sample:
            writer.write('{}\n'.format(result))

if __name__ == '__main__':
    main()
